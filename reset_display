#!/usr/bin/env bash

#Instead of using a custom generated config file, I will try to pull from /etc/xorg.config
#to add a higher level of scalability

######current potential flags
# remove-config -> removes current config
# generate -> creates new config file based on display
# -h / --h / -help / --help -> show current commands


bold=$(tput bold)
normal=$(tput sgr0)
configFile="/u/$USER/.config/reset_display.conf"
nvConf="/etc/X11/xorg.conf"
flag=$1 #capture the flag into a script variable rather than leaving as special

#Declaring writeable variables here as they persist through the code
PrimDisplay=""
SecDisplay=""
PrimPosition=""
SecPosition=""
PrimaryOption=""
PrimaryRes=""
SecRes=""

if [[ $flag = "-h" || $flag = "--h" || $flag = "-help" || $flag = "--help" ]]
then
cat <<EOF

  usage: reset_display [option]

  ${bold}generate${normal}                 : generates custom config
  ${bold}remove-config${normal}            : removes custom config
  ${bold}custom - broken${normal}          : reset display using the xorg config file located $nvConf

  If running remotely, run the command:
  ${bold}setenv DISPLAY :0${normal} before running the script

  Description:
  This script is designed to reset the displays after a monitor shuts off or sleeps
  When run by itself, the script will reset the displays based on the self-generated configuration file

  Primary use (pulls from configuration file):
  reset_display

  If you want to generate a custom config to place in ${bold}$configFile${normal}:
  reset_display generate
  ${bold}(NOTE: Make sure the displays are set the way you want first, before doing this or you will record incorrect parameters)${normal}

  If you want to remove the custom config:
  reset_display remove-config

  If you want to use the nvidia config (feature currently broken):
  reset_dusplay custom

  How to use: 
  1) Change settings in nvidia-settings, save xorg.conf
  2) Run ${bold}reset_display generate${normal} to create the custom configuration file
  3) Whenever the screen mirrors, run ${bold}reset_display${normal} in terminal

EOF
  exit 2
fi

#This is a flag to allow the user to remove the config without admin intervention
#need to turn this into a try at some point
if [[ $flag = "remove-config" ]] && [[ -e $configFile ]]
then
  rm -f ${configFile}
  printf "Config file removed successfully \n"
  printf "Exiting script \n"
  exit 2
elif [[ $flag = "remove-config" ]] && [[ ! -e $configFile ]]
then
   printf "Config file not found, either it has been moved or needs to be generated \n"
fi

#Create a config file based on current settings (don't run when monitor is messed up)
if [[ ! -e $configFile ]] && [[ $flag = "generate" ]]
then
  printf "Creating config file now... \n"
  #printf "in the if statement \n" #debug statement
  PrimaryOption=$(xrandr -q | grep -e "\bprimary\b" | grep -v "disconnected" | awk '{print $1}')
  if [[ ! $PrimaryOption = "" ]]
  then
    PrimDisplay=${PrimaryOption}
    SecDisplay=$(xrandr -q | grep -e "\bconnected\b" | grep -v "primary" | awk '{print $1}')
    PrimPosition=$(xrandr -q | grep -e "\bprimary\b" | awk '{print $4}' | cut -d+ -f2- | sed 's/+/\x/g')
    SecPosition=$(xrandr -q | grep -e "\bconnected\b" | grep -v "primary" | awk '{print $3}'| cut -d+ -f2- | sed 's/+/\x/g')
    PrimaryRes=$(xrandr -q | grep -e "\bprimary\b" | awk '{print $4}' | cut -d+ -f1)
    SecRes=$(xrandr -q | grep -e "\bconnected\b" | grep -v "\bprimary\b" | awk '{print $3}' | cut -d+ -f1)
  elif [[ $PrimaryOption = "" ]]
  then
    PrimDisplay=$(xrandr -q | grep -e "+0+0" | awk '{print $1}')
    SecDisplay=$(xrandr -q | grep -e "\bconnected\b" | grep -v "+0+0" | awk '{print $1}')
    PrimPosition=$(xrandr -q | grep -e ${PrimDisplay} | awk '{print $3}' | cut -d+ -f2- | sed 's/+/\x/g')
    SecPosition=$(xrandr -q | grep -e ${SecDisplay} | awk '{print $3}' | cut -d+ -f2- | sed 's/+/\x/g')
    PrimaryRes=$(xrandr -q | grep -e ${PrimDisplay} | awk '{print $3}' | cut -d+ -f1)
    SecRes=$(xrandr -q | grep -e ${SecDisplay} | awk '{print $3}' | cut -d+ -f1)
  fi

  #The indentation of EOF from top to bottom is intentional, spacing it would break it
cat <<EOF > $configFile
#This file is created for the reset_display script
#If this file gets corrupted please remove it as the script will recreate it
#Do not modify!
#Talk to Jon, Hector or Jack for any questions
PRIMARYOPTION=$PrimaryOption
PRIMARYDISPLAY=$PrimDisplay
SECONDARYDISPLAY=$SecDisplay
PRIMARYPOSITION=$PrimPosition
SECONDARYPOSITION=$SecPosition
PRIMARYRESOLUTION=$PrimaryRes
SECONDARYRESOLUTION=$SecRes
EOF

printf "Done \n"
exit 3
elif [[ -e $configFile ]] && [[ $flag = "generate" ]]
then
  printf "Config file already exists, if you want to remove it, run remove-config first \n"
fi

#array to store values read from conf file
declare -A disparray

IFS="="
success=0

if [[ $flag =  "" ]] && [[ -e $configFile ]]
then
  printf "Resetting display based on config file (${bold}${configFile}${normal}) \n"
  while read -r key value
  do
  #printf "Content of $key is ${value//\"/} \n" #for debugging
    case $key in
      "PRIMARYOPTION")
        disparray+=(["PRIMARYOPTION"]=$value)
        ;;
      "PRIMARYDISPLAY")
        disparray+=(["PRIMARYDISPLAY"]=$value)
        ;;
      "SECONDARYDISPLAY")
        disparray+=(["SECONDARYDISPLAY"]=$value)
        ;;
      "PRIMARYPOSITION")
        disparray+=(["PRIMARYPOSITION"]=$value)
        ;;
      "SECONDARYPOSITION")
        disparray+=(["SECONDARYPOSITION"]=$value)
        ;;
      "PRIMARYRESOLUTION")
        disparray+=(["PRIMARYRESOLUTION"]=$value)
        ;;
      "SECONDARYRESOLUTION")
        disparray+=(["SECONDARYRESOLUTION"]=$value)
        ;;
    esac
  done < $configFile
  success=1
elif [[ -e $nvConf ]] && [[ $flag = "custom" ]]
then
  printf "Resetting display based on config file (${nvConf}) \n"
  #unfortunately I can't find the primary monitor flag in the xorg conf file
  #so this will be a broken feature for now
elif [[ ! -e $configFile ]] && [[ ! -e $nvConf ]]
then
  printf "Unable to find config file, please run reset_display generate to create one \n"
  success=0
  exit 5
fi

#code execution to reset display
if [[ -e $configFile ]] && [[ ! -z $disparray["PRIMARYDISPLAY"] ]] && [[ $success = 1 ]]
then
  #printf "successfully executing \n" #debugging line
  if [[ ! ${disparray["PRIMARYOPTION"]} = "" ]]
  then
    xrandr --output ${disparray["PRIMARYDISPLAY"]} --size ${disparray["PRIMARYRESOLUTION"]}  --pos ${disparray["PRIMARYPOSITION"]} --primary;
    xrandr --output ${disparray["SECONDARYDISPLAY"]} --size ${disparray["SECONDARYRESOLUTION"]} --pos ${disparray["SECONDARYPOSITION"]}
    printf "Reset completed normally, primary option found \n"
    exit 0
  elif [[ ${disparray["PRIMARYOPTION"]} = "" ]]
  then
    xrandr --output ${disparray["PRIMARYDISPLAY"]} --size ${disparray["PRIMARYRESOLUTION"]} --pos ${disparray["PRIMARYPOSITION"]};
    xrandr --output ${disparray["SECONDARYDISPLAY"]} --size ${disparray["SECONDARYRESOLUTION"]} --pos ${disparray["SECONDARYPOSITION"]}
    printf "Reset completed normally, no primary option \n"
    exit 0
  fi
elif [[ ! -e $configFile ]] && [[ -z $disparray["PRIMARYDISPLAY"] ]] && [[ $flag = "" ]] || [[ $success = 0 ]] && [[ $flag = "" ]]
then
  printf "Error during reset \n"
  printf "Check to see if config file exists in ${bold}$configFile${normal} \n"
fi


#debugging and logging
#printf "Primary Display = ${disparray['PRIMARYDISPLAY']} \n"
#printf "Secondary Display = ${SecDisplay}\n"
